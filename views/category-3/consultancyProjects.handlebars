<h5>Category 3</h5><br>
<h6>Academic Year: {{academic_year}}</h6>

<div id="flashMessage" style="display: none; color: white; background-color: rgb(72, 153, 84); padding: 10px; margin-top: 10px; text-align: center;">
</div>

<div class="container">
    <h6>3.3.2 Consultancy Projects Carried Out/Ongoing</h6>
    <hr>

    <form action="/category-3/consultancyProjects" method="POST" enctype="multipart/form-data">
        <!-- Consultancy Entries Container -->
        <div id="consultancyEntries"></div>

        <h6>Total Individual Score: <span id="consultancyTotalScore">0</span></h6>

        <div class="row">
            <div style="margin-top: 20px; display: flex; gap: 20px;" class="input-field col s8">
                <button type="button" id="addConsultancy" class="btn orange">Add Another Entry</button>
                <button type="submit" id="submitBtn" class="btn green" disabled>Submit</button>
            </div>
            <div style="margin-top: 20px; display: flex; gap: 50px;" class="input-field col s4">
                <a href="/pdfs/help.pdf" target="_blank" class="btn blue">Help <i class="material-icons right">help_outline</i></a>
            </div>
        </div>
    </form>
</div>

<script>
    let savedConsultancies = [];

    // Push consultancy projects data from the backend into the savedConsultancies array
    {{#if consultancyProjects}}
        savedConsultancies.push({
            academic_year: "{{consultancyProjects.academic_year}}",
            entries: [
                {{#each consultancyProjects.entries}}
                    {
                        title: "{{this.title}}",
                        funding_agency: "{{this.funding_agency}}",
                        amount: "{{this.amount}}",
                        document: "{{this.document}}",
                        score: {{this.score}}
                    },
                {{/each}}
            ]
        });
    {{/if}}

    console.log("Saved Consultancies: before filtering", savedConsultancies);

    // Get the academic year from the server
    let selectedYear = "{{academic_year}}";
    console.log("Selected Academic Year:", selectedYear);

    // Filter the entries by academic year
    let currentYearEntries = savedConsultancies.length > 0 ? savedConsultancies[0].entries : [];
    console.log("Current Year Entries:", currentYearEntries);

    // Function to update the total score
    function updateConsultancyScore() {
        let totalScore = [...document.querySelectorAll(".consultancy-entry")].reduce((sum, entry) => {
            let amount = parseFloat(entry.querySelector("input[name='amount[]']").value) || 0;
            return sum + Math.floor(amount / 200000) * 10; // Calculate score dynamically
        }, 0);

        document.getElementById("consultancyTotalScore").innerText = totalScore;
    }

    // Function to add a consultancy entry to the UI
    function addConsultancyEntry(project = null) {
        let entry = document.createElement("div");
        entry.classList.add("row", "consultancy-entry");
        entry.innerHTML = `
            <div class="input-field col s12">
                <input type="text" name="title[]" value="${project ? project.title : ''}" required>
                <label class="active">Project Title</label>
            </div>
            <div class="input-field col s12">
                <input type="text" name="funding_agency[]" value="${project ? project.funding_agency : ''}" required>
                <label class="active">Funding Agency</label>
            </div>
            <div class="input-field col s12">
                <input type="number" name="amount[]" value="${project ? project.amount : ''}" required min="1000000" step="100000">
                <label class="active">Amount Mobilized (in Rs.)(min:10 Lakhs)</label>
            </div>
            <div class="input-field col s6">
                ${project && project.document ? `
                    <a href="/${project.document}" target="_blank" class="btn blue">View Document</a>
                    <input type="hidden" name="document_existing[]" value="${project.document}">
                ` : '<input type="file" name="document[]" accept=".pdf,.jpg,.png" class="new-project-doc" required>'}
            </div>
            <div class="col s6">
                <button type="button" class="btn red remove-consultancy">Remove</button>
            </div>
        `;

        document.getElementById("consultancyEntries").appendChild(entry);
        updateConsultancyScore();
    }

    // Function to load consultancy entries into the UI
    function loadConsultancyEntries() {
        document.getElementById("consultancyEntries").innerHTML = "";

        if (currentYearEntries.length > 0) {
            currentYearEntries.forEach(project => addConsultancyEntry(project));
        } else {
            addConsultancyEntry(); // Add an empty entry if no saved entries exist
        }
    }

    // Function to validate the form
    function validateForm() {
        let allFilled = [...document.querySelectorAll("#consultancyEntries input[required]")].every(input => {
            if (input.type === "file") {
                return input.files.length > 0 || input.closest(".consultancy-entry").querySelector("input[name='document_existing[]']");
            }
            return input.value.trim() !== "";
        });

        document.getElementById("submitBtn").disabled = !allFilled;
    }

    // Event listener to add a new consultancy entry
    document.getElementById("addConsultancy").addEventListener("click", function () {
        addConsultancyEntry();
    });

    // Event listener to handle removing consultancy entries
    document.addEventListener("click", function (event) {
        if (event.target.classList.contains("remove-consultancy")) {
            let entry = event.target.closest(".consultancy-entry");
            let title = entry.querySelector("input[name='title[]']").value;

            if (confirm("Are you sure you want to delete this entry?")) {
                // Send DELETE request to the backend
                fetch('/category-3/deleteConsultancyProject', {
                    method: 'POST',
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ title: title })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Remove from savedConsultancies (frontend)
                        currentYearEntries = currentYearEntries.filter(project => project.title !== title);

                        // Remove from UI
                        entry.remove();

                        // Update Total Score
                        if (typeof data.newTotalScore !== "undefined") {
                            document.getElementById("consultancyTotalScore").innerText = data.newTotalScore;
                        }

                        // Show Flash Message
                        let flashMessage = document.getElementById("flashMessage");
                        flashMessage.innerText = "Entry deleted successfully.";
                        flashMessage.style.display = "block";

                        setTimeout(() => { flashMessage.style.display = "none"; }, 3000);
                    } else {
                        alert("Error: " + data.message);
                    }
                })
                .catch(error => console.error("Error:", error));
            }
        }
    });

    // Event listeners for input and change events
    document.addEventListener("input", function (event) {
        if (event.target.closest("#consultancyEntries")) {
            updateConsultancyScore();
        }
    });

    document.addEventListener("change", function (event) {
        if (event.target.closest("#consultancyEntries") && event.target.type === "file") {
            validateForm();
        }
    });

    // Load consultancy entries on page load
    loadConsultancyEntries();
</script>