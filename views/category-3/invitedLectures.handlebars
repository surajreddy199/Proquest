<h5>Category 3</h5><br>
<h6>Academic Year: {{academic_year}}</h6>

<div id="flashMessage" style="display: none; color: white; background-color: rgb(72, 153, 84); padding: 10px; margin-top: 10px; text-align: center;">
</div>

<div class="container">
    <h6>3.5.3 Invited Lectures or Presentations for Conferences/Symposia</h6>
    <hr>

    <form action="/category-3/invitedLectures" method="POST" enctype="multipart/form-data">
        <div class="row">
            <div class="input-field col s12 md5">
                <select name="lecture_type" class="validate" id="lectureType">
                    <option value="" disabled selected>Select Lecture Type</option>
                    <option value="international">International</option>
                    <option value="national">National</option>
                </select>
                <label>Lecture Type</label>
            </div>
        </div>

        <!-- Lecture Entries Container -->
        <div id="lectureEntries"></div>

        <input type="hidden" name="lecture_type" id="hiddenLectureType">
        <h6>Total Individual Score: <span id="lecturesTotalScore">0</span></h6>

        <div class="row">
            <div style="margin-top: 20px; display: flex; gap: 20px;" class="input-field col s8">
                <button type="button" id="addLecture" class="btn orange">Add Another Entry</button>
                <button type="submit" id="submitBtn" class="btn green" disabled>Submit</button>
            </div>
            <div style="margin-top: 20px; display: flex; gap: 50px;" class="input-field col s4">
                <a href="/pdfs/help.pdf" target="_blank" class="btn blue">Help <i class="material-icons right">help_outline</i></a>
            </div>
        </div>
    </form>
</div>

<script>
    let savedLectures = [];

    {{#each invitedLectures}}
        savedLectures.push({
            lecture_type: "{{this.lecture_type}}",
            academic_year: "{{this.academic_year}}",
            entries: [
                {{#each this.entries}}
                    {
                        title: "{{this.title}}",
                        event: "{{this.event}}",
                        date: "{{this.date}}",
                        document: "{{this.document}}",
                        score: {{this.score}}
                    },
                {{/each}}
            ]
        });
    {{/each}}

    let selectedYear = "{{academic_year}}";

    savedLectures = savedLectures.filter(entry => entry.academic_year === selectedYear);

    const scoreMapping = {
        international: 10,
        national: 5
    };

    document.getElementById("lectureType").addEventListener("change", function () {
        document.getElementById("hiddenLectureType").value = this.value;
        loadLectureEntries(this.value);
    });

    function updateLecturesScore() {
        let type = document.getElementById("lectureType").value;
        let scorePerEntry = scoreMapping[type] || 0;
        let count = document.querySelectorAll(".lecture-entry[data-type='" + type + "']").length;
        document.getElementById("lecturesTotalScore").innerText = count * scorePerEntry;
        validateForm();
    }

    function addLectureEntry(type, lecture = null) {
        let formattedDate = lecture && lecture.date ? new Date(lecture.date).toISOString().split('T')[0] : '';
        let entry = document.createElement("div");
        entry.classList.add("row", "lecture-entry");
        entry.setAttribute("data-type", type);
        entry.innerHTML = `
            <div class="input-field col s12">
                <input type="text" name="title[]" value="${lecture ? lecture.title : ''}" required>
                <label class="active">Lecture/Presentation Title</label>
            </div>
            <div class="input-field col s12">
                <input type="text" name="event[]" value="${lecture ? lecture.event : ''}" required>
                <label class="active">Event/Conference Name</label>
            </div>
            <div class="input-field col s12">
                <input type="date" name="date[]" value="${formattedDate}" required>
                <label class="active">Date</label>
            </div>
            <div class="input-field col s6">
                ${lecture && lecture.document ? `
                    <a href="/${lecture.document}" target="_blank" class="btn blue">View Document</a>
                    <input type="hidden" name="document_existing[]" value="${lecture.document}">
                ` : '<input type="file" name="document[]" accept=".pdf,.jpg,.png" class="new-lecture-doc" required>'}
            </div>
            <div class="col s6">
                <button type="button" class="btn red remove-lecture">Remove</button>
            </div>
        `;

        document.getElementById("lectureEntries").appendChild(entry);
        updateLecturesScore();
    }

    document.getElementById("addLecture").addEventListener("click", function () {
        let type = document.getElementById("lectureType").value;
        if (!type) {
            alert("Please select a lecture type first.");
            return;
        }
        addLectureEntry(type);
    });

    document.addEventListener("click", function (event) {
        if (event.target.classList.contains("remove-lecture")) {
            let entry = event.target.closest(".lecture-entry");
            let type = entry.getAttribute("data-type");
            let title = entry.querySelector("input[name='title[]']").value;

            if (confirm("Are you sure you want to delete this entry?")) {
                fetch('/category-3/deleteInvitedLecture', {
                    method: 'POST',
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ lecture_type: type, title: title })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        let lectureData = savedLectures.find(entry => entry.lecture_type === type);
                        if (lectureData) {
                            lectureData.entries = lectureData.entries.filter(lecture => lecture.title !== title);
                        }

                        entry.remove();
                        if (typeof data.newTotalScore !== "undefined") {
                            document.getElementById("lecturesTotalScore").innerText = data.newTotalScore;
                        }

                        let flashMessage = document.getElementById("flashMessage");
                        flashMessage.innerText = "Entry deleted successfully.";
                        flashMessage.style.display = "block";

                        setTimeout(() => { flashMessage.style.display = "none"; }, 3000);
                    } else {
                        alert("Error: " + data.message);
                    }
                })
                .catch(error => console.error("Error:", error));
            }
        }
    });

    function loadLectureEntries(lectureType) {
        document.getElementById("lectureEntries").innerHTML = "";
        let matchedLectures = savedLectures.find(entry => entry.lecture_type === lectureType);

        if (matchedLectures && matchedLectures.entries.length > 0) {
            matchedLectures.entries.forEach(lecture => addLectureEntry(lectureType, lecture));
        } else {
            addLectureEntry(lectureType);
        }
    }

    document.querySelector("form").addEventListener("submit", function (event) {
        // Validate for duplicate titles
        let titles = [...document.querySelectorAll("input[name='title[]']")].map(input => input.value.trim().toLowerCase());
        let hasDuplicates = titles.some((title, index) => titles.indexOf(title) !== index);

        if (hasDuplicates) {
            event.preventDefault(); // Prevent form submission
            alert("Duplicate titles are not allowed. Please ensure all titles are unique.");
            return;
        }
    });

    function validateForm() {
        let allFilled = [...document.querySelectorAll("#lectureEntries input[required]")].every(input => {
            if (input.type === "file") {
                return input.files.length > 0 || input.closest(".lecture-entry").querySelector("input[name='document_existing[]']");
            }
            return input.value.trim() !== "";
        });

        // Ensure type of output is selected
        let allTypesSelected = [...document.querySelectorAll("select[name='lecture_type[]']")].every(select => select.value.trim() !== "");

        document.getElementById("submitBtn").disabled = !(allFilled && allTypesSelected);
    }

    document.addEventListener("input", function (event) {
        if (event.target.closest("#lectureEntries")) {
            validateForm();
        }
    });

    document.addEventListener("change", function (event) {
        if (event.target.closest("#lectureEntries") && event.target.type === "file") {
            validateForm();
        }
    });
    document.addEventListener("change", function (event) {
        if (event.target.closest("#lectureEntries") && event.target.name === "lecture_type[]") {
            updateLecturesScore();
        }
    });
</script>